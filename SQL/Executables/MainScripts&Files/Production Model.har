#####################################################
##      Do not change the content of the file.     ##
##      It will not import correctly.              ##
#####################################################
[PROJECT]

bCopyAccess=1
=21
Name=Production Model
Template=1
Active=0
=1955
Note=The Production Model is used by organizations that have an operational environment that must be kept running and which has constant changes that need to be added.  There is no concept of a release.  Changes are added as needed.

The default Production Model has five basic states: Development, Merge, Test, Staging and Production.  It also includes an Emergency state.  The Development, Emergency and Production states are in the Production view, guaranteeing that any changes made to the software will be based on the versions in production. 
 
The flow through the life cycle starts when a fix is needed to production.  A package is created that will track the work through the life cycle, and a change request form that describes the required changes is associated with the package.  Anyone can create a change package.  When the change is ready for work, items are checked out for Concurrent Update, which places the changes on a branch.  After the change is made, it is checked back into that branch and is associated with the initiating package.  When the changes are ready for implementation, packages are promoted to the Merge state, which belongs to the Merge view.
Once the changes are merged to the trunk, the packages are promoted to the Test state in the Test view.  This allows testers to test out the changes without affecting the Production view, and isolates the changes so that updates in the Merge view do not affect the Test view.  When all the testing is done, the packages are promoted to the Staging state, which allows the Production manager to pull those changes into the production environment.  During this promotion, if an item in the packages being promoted also has a version associated with a package in the Emergency Package Group, the package promotion will fail. When the packages are promoted from Staging to Production, the changes become visible in the Production view and are ready for the next round of changes.
CreateUserGroup=0

[SecureAccess]
AccessMethod=SecureAccess
size=1
nameUserGroup=Dev Manager
=5
Note=

[UpdateAccess]
AccessMethod=UpdateAccess
size=1
nameUserGroup=Dev Manager
=5
Note=

[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Dev Manager
=5
Note=

[ViewAccess]
AccessMethod=ViewAccess
size=0

[WORKINGVIEW]

size=4
NameView=Production
=5
Note=
NameView=Merge
=5
Note=
NameView=Test
=5
Note=

[STATES]

size=6
Name=Development
=2004
Note=The Production Model is used by organizations that have an operational environment that must be kept running and which has constant changes that need to be added.  There is no concept of a release.  Changes are added as needed.
The default Production Model has five basic states: Development, Merge, Test, Staging and Production.  It also includes an Emergency state.  The Development, Emergency and Production states are in the Production view, guaranteeing that any changes made to the software will be based on the versions in production.  
The flow through the life cycle starts when a fix is needed to production.  A package is created that will track the work through the life cycle, and a change request form that describes the required changes is associated with the package.  Anyone can create a change package.  When the change is ready for work, items are checked out for Concurrent Update, which places the changes on a branch.  After the change is made, it is checked back into that branch and is associated with the initiating package.  When the changes are ready for implementation, packages are promoted to the Merge state, which belongs to the Merge view.
Once the changes are merged to the trunk, the packages are promoted to the Test state in the Test view.  This allows testers to test out the changes without affecting the Production view, and isolates the changes so that updates in the Merge view do not affect the Test view.  When all the testing is done, the packages are promoted to the Staging state, which allows the Production manager to pull those changes into the production environment.  During this promotion, if an item in the packages being promoted also has a version associated with a package in the Emergency Package Group, the package promotion will fail. When the packages are promoted from Staging to Production, the changes become visible in the Production view and are ready for the next round of changes.
When an Emergency fix is needed, a package is crea
PMStatusName=None_Defined
Snapshot=0
StateOrder=1
XLocation=181
YLocation=355
NameView=Production

[UpdateAccess]
AccessMethod=UpdateAccess
size=1
nameUserGroup=Dev Manager
=5
Note=

[UpdatePkgAccess]
AccessMethod=UpdatePkgAccess
size=2
nameUserGroup=Dev Manager
=5
Note=
nameUserGroup=Public
=5
Note=

Name=Merge
=460
Note=This state is in the Merge view, and any changes done in this view are not seen in Production.  This state is where the changes on branches are merged with the Production code, new files are added, and old files are removed.  This state assumes that there is a distinct user group called Merge Engineer that controls all the work that goes on here.  You can modify the access control for these processes if you need to let other users perform these steps.
PMStatusName=None_Defined
Snapshot=0
StateOrder=2
XLocation=154
YLocation=84
NameView=Merge

[UpdateAccess]
AccessMethod=UpdateAccess
size=1
nameUserGroup=Dev Manager
=5
Note=

[UpdatePkgAccess]
AccessMethod=UpdatePkgAccess
size=2
nameUserGroup=Dev Manager
=5
Note=
nameUserGroup=Public
=5
Note=

Name=Test
=254
Note=This state is in the Test view and is isolated from the Development and Merge states.  This state is where formal testing of the changes occur.  The Test Manager must approve the packages in this state before they can be moved into the Staging area.
PMStatusName=None_Defined
Snapshot=0
StateOrder=3
XLocation=443
YLocation=86
NameView=Test

[UpdateAccess]
AccessMethod=UpdateAccess
size=1
nameUserGroup=Dev Manager
=5
Note=

[UpdatePkgAccess]
AccessMethod=UpdatePkgAccess
size=2
nameUserGroup=Dev Manager
=5
Note=
nameUserGroup=Public
=5
Note=

Name=Staging
=198
Note=This state is used as a holding area for items that need to go into production.  This allows the Production Control group the opportunity to schedule when the fixes actually go into production.
PMStatusName=None_Defined
Snapshot=0
StateOrder=4
XLocation=699
YLocation=87
NameView=Test

[UpdateAccess]
AccessMethod=UpdateAccess
size=1
nameUserGroup=Dev Manager
=5
Note=

[UpdatePkgAccess]
AccessMethod=UpdatePkgAccess
size=2
nameUserGroup=Dev Manager
=5
Note=
nameUserGroup=Public
=5
Note=

Name=Production
=92
Note=This state is the final resting place for everything that has been put into production.
PMStatusName=None_Defined
Snapshot=0
StateOrder=5
XLocation=700
YLocation=356
NameView=Production

[UpdateAccess]
AccessMethod=UpdateAccess
size=1
nameUserGroup=Dev Manager
=5
Note=

[UpdatePkgAccess]
AccessMethod=UpdatePkgAccess
size=2
nameUserGroup=Dev Manager
=5
Note=
nameUserGroup=Public
=5
Note=

Name=Emergency
=165
Note=This state is where emergency fixes are done.  Emergency fixes are created on branches, and remain on branches until they are merged into production and tested.
PMStatusName=None_Defined
Snapshot=0
StateOrder=6
XLocation=450
YLocation=358
NameView=Production

[UpdateAccess]
AccessMethod=UpdateAccess
size=1
nameUserGroup=Dev Manager
=5
Note=

[UpdatePkgAccess]
AccessMethod=UpdatePkgAccess
size=2
nameUserGroup=Dev Manager
=5
Note=
nameUserGroup=Public
=5
Note=


[PROCESS]

STATESIZE=6
STATENAME=Development
size=8
iProcessType=201
Name=Check In Modified Files
=522
Note=This process is used to check in an existing item after it has been modified.  You must reserve the item before you can check in new changes.  Only members of the Developer group have access to execute this process.  You must specify the package these changes are associated with.  When the file is checked in, the reserve tag is removed, the new revision of the item is placed in the repository,  the file is changed to read-only, and the signature file in the directory from which the file is checked in is updated.
ProcessOrder=4
CheckinMode=0
DeleteAfterCI=0
=11
Description=
ExistingOnly=1
ItemNewer=0
NewOnly=0
NewOrExisting=0
OwnerOnly=0
ItemOption=2
PathOption=0
ClientDir=/
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Developer
=5
Note=

iProcessType=202
Name=Check Out for Browse
=375
Note=This process is used to check out a items for read-only.  Anyone can invoke the process.  You can choose to check items out for Browse, which will check out a read-only copy of every item you specify in the version list, or you can check out items for Synchronize, which will only check out items for read-only that have changed since the last time you checked them out.
ProcessOrder=3
BrowseMode=1
CheckoutMode=-1
ConcUpdateMode=0
ItemNewer=0
PathOption=2
ReplaceFile=1
ReserveMode=0
ShareWorkDir=0
SyncMode=1
UpdateMode=0
UseCITimeStamp=0
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Public
=5
Note=

iProcessType=202
Name=Check Out for Update
=323
Note=This process is used to check out an item for Concurrent Update.  Only members of the Developer group can invoke this process.  The developer must specify a package that these changes will be associated with.  When the item is checked out, a reserved tag is placed on the end of the branch associated with the package.
ProcessOrder=2
BrowseMode=0
CheckoutMode=-1
ConcUpdateMode=1
ItemNewer=0
PathOption=2
ReplaceFile=1
ReserveMode=0
ShareWorkDir=0
SyncMode=0
UpdateMode=0
UseCITimeStamp=0
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Developer
=5
Note=

iProcessType=211
Name=Create Package
=231
Note=This process is used to create a work package.  Anyone can execute this process.  When a new package is created, a unique number is generated for the package name and a Modification Request Form is associated with the package.
ProcessOrder=1
CreateAssociatedForm=1
DefaultName=MR-%N('099999')
FormTypeObjId=6
StateName=Development
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Public
=5
Note=

iProcessType=203
Name=Delete Versions
=204
Note=This process is used to delete a version from the repository.  The process can only be invoked by the Development Manager.  Once a version has been removed from the repository it cannot be recovered.
ProcessOrder=8
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Dev Manager
=5
Note=

iProcessType=206
Name=List Versions
=145
Note=This process is used to get a Unix-type difference report between two versions of a repository file.  This process can be invoked by anyone.
ProcessOrder=7
ShowActualChangesFlag=0
ShowDescriptionFlag=0
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Public
=5
Note=

iProcessType=210
Name=Notify - Add New File
=481
Note=Because a file cannot be added to the Production view until it has been tested, a mail notification must be sent to the Merge Engineer to notify him/her that the new file must be added to the repository when the merge occurs.  You must modify the body of the notification process to include the directory name where the file is located, the file name, and the package it must be associated with.  Once this information is entered, select the Notify button to send the message.
ProcessOrder=5
=154
MailMessage=Please add file: <put your file name here>
Located in the directory: <put where the file is located here>
For Package: <put package name here>
MailFacility=hmail -usr harvest -pw mail
Subject=
OnErrorAction=Display
OuputOption=Display
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=2
nameUserGroup=Dev Manager
=5
Note=
nameUserGroup=Developer
=5
Note=

iProcessType=213
Name=Promote to Merge
=311
Note=This process is used to promote packages that are ready for implementation to the Merge state.  To select packages for promotion, select the packages on the Workbench before invoking this process, or use the Package Chooser within the process window.  Only the Development Manager can perform this process.
ProcessOrder=6
CheckPackageGroupBind=0
CheckPackageDependencies=0
MergedPkgsOnly=1
FromState=Development
ToState=Merge
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Dev Manager
=5
Note=

STATENAME=Merge
size=9
iProcessType=200
Name=Approve Promote to Test
=343
Note=This process must be run to mark a package ready for promotion to Test.  This process can only be invoked by the Development Manager, since his/her electronic signature is needed to complete this process.  If this process is run and the package is rejected, only the person who rejected the package can later approve it for the promotion.
ProcessOrder=5
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Dev Manager
=5
Note=

iProcessType=201
Name=Check In New Files
=183
Note=This process is used to check in new files. You must specify the package that the new files are associated with during check in.  Only the Merge Engineer can invoke this process.
ProcessOrder=2
CheckinMode=0
DeleteAfterCI=0
=11
Description=
ExistingOnly=0
ItemNewer=0
NewOnly=1
NewOrExisting=0
OwnerOnly=0
ItemOption=1
PathOption=0
ClientDir=/
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Merge Engineer
=5
Note=

iProcessType=202
Name=Check Out for Browse
=375
Note=This process is used to check out a items for read-only.  Anyone can invoke the process.  You can choose to check items out for Browse, which will check out a read-only copy of every item you specify in the version list, or you can check out items for Synchronize, which will only check out items for read-only that have changed since the last time you checked them out.
ProcessOrder=1
BrowseMode=1
CheckoutMode=-1
ConcUpdateMode=0
ItemNewer=0
PathOption=2
ReplaceFile=1
ReserveMode=0
ShareWorkDir=0
SyncMode=1
UpdateMode=0
UseCITimeStamp=0
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Public
=5
Note=

iProcessType=203
Name=Delete Versions
=199
Note=This process is used to delete a version from the repository.  The process can only be invoked by the Merge Engineer.  Once a version has been removed from the repository it cannot be recovered.
ProcessOrder=8
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Merge Engineer
=5
Note=

iProcessType=209
Name=Interactive Merge
=672
Note=This process is used to resolve any merge-tagged version.  This process can be run by the Merge Engineer, as well as any member Developer group, since the Merge Manager will probably call upon the development group to resolve the merge issues.  Once the Interactive Merge process is complete, the merge tag is removed from the item and a new delta is inserted into the repository.

This process can be run without having to run the Merge Files process first.  To do this, select the package you want to run the merge process on, and select Interactive Merge.  This process will then perform the Merge Files process and go directly into the Interactive Merge process.

ProcessOrder=4
ExecuteFlag=0
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=2
nameUserGroup=Developer
=5
Note=
nameUserGroup=Merge Engineer
=5
Note=

iProcessType=206
Name=List Versions
=145
Note=This process is used to get a Unix-type difference report between two versions of a repository file.  This process can be invoked by anyone.
ProcessOrder=7
ShowActualChangesFlag=0
ShowDescriptionFlag=0
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Public
=5
Note=

iProcessType=207
Name=Merge Files
=425
Note=This process is used to merge the changes on a branch to the environment trunk.  The Merge Engineer is the only user who can invoke this process.  To merge the changes, select the package to be merged in the Workbench and then select this process.  If there are any merge issues that must be resolved, a merge tag is placed on the trunk.  The only way to remove the merge tag is by running the Interactive Merge process.
ProcessOrder=3
MergeRule=A
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Merge Engineer
=5
Note=

iProcessType=213
Name=Promote to Test
=414
Note=This process is used to promote packages from the Merge state to the Test state.  To select packages for promotion, select the packages on the Workbench before invoking this process, or use the Package Chooser within the process window.  Any member of the Developer or Merge Engineer group can perform this process, but if the package has not been approved by the Development Manager, it will not be promoted.
ProcessOrder=6
CheckPackageGroupBind=0
CheckPackageDependencies=0
MergedPkgsOnly=0
FromState=Merge
ToState=Test
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=3
nameUserGroup=Dev Manager
=5
Note=
nameUserGroup=Developer
=5
Note=
nameUserGroup=Merge Engineer
=5
Note=

iProcessType=214
Name=Remove Item
=5
Note=
ProcessOrder=9
=12
Description=
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Merge Engineer
=5
Note=

STATENAME=Test
size=5
iProcessType=200
Name=Approve Promote to Staging
=339
Note=This process must be run to mark a package ready for promotion to Staging.  This process can only be invoked by the Test Manager, since his/her electronic signature is needed to complete this process.  If this process is run and the package is rejected, only the person who rejected the package can later approve it for the promotion.
ProcessOrder=2
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Test Manager
=5
Note=

iProcessType=202
Name=Check Out for Browse
=375
Note=This process is used to check out a items for read-only.  Anyone can invoke the process.  You can choose to check items out for Browse, which will check out a read-only copy of every item you specify in the version list, or you can check out items for Synchronize, which will only check out items for read-only that have changed since the last time you checked them out.
ProcessOrder=1
BrowseMode=1
CheckoutMode=-1
ConcUpdateMode=0
ItemNewer=0
PathOption=2
ReplaceFile=1
ReserveMode=0
ShareWorkDir=0
SyncMode=1
UpdateMode=0
UseCITimeStamp=0
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Public
=5
Note=

iProcessType=204
Name=Demote to Merge
=161
Note=This process is used to demote packages back to the Merge state that were not fixed properly.  Only the Test Manager can demote a package with this process.
ProcessOrder=4
CheckPackageGroupBind=0
CheckPackageDependencies=0
ToState=Merge
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Test Manager
=5
Note=

iProcessType=206
Name=List Versions
=145
Note=This process is used to get a Unix-type difference report between two versions of a repository file.  This process can be invoked by anyone.
ProcessOrder=5
ShowActualChangesFlag=0
ShowDescriptionFlag=0
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Public
=5
Note=

iProcessType=213
Name=Promote To Staging
=634
Note=This process is used to promote package from the Test state to the Staging state after testing is complete.  To select packages for promotion, select the packages on the Workbench before invoking this process, or use the Package Chooser within the process window.  Any Tester can perform this process, but if the package has not been approved by the Test Manager, it will not be promoted.  The promotion will also fail if an item affected by the package is also affected by a package in the Emergency Fix group.  If it is, then the package cannot be promoted until the Emergency Fix package has been promoted to the Staging area.
ProcessOrder=3
CheckPackageGroupBind=0
CheckPackageDependencies=0
MergedPkgsOnly=0
FromState=Test
ToState=Staging
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=2
nameUserGroup=Test Manager
=5
Note=
nameUserGroup=Tester
=5
Note=

STATENAME=Staging
size=3
iProcessType=202
Name=Check Out for Browse
=375
Note=This process is used to check out a items for read-only.  Anyone can invoke the process.  You can choose to check items out for Browse, which will check out a read-only copy of every item you specify in the version list, or you can check out items for Synchronize, which will only check out items for read-only that have changed since the last time you checked them out.
ProcessOrder=1
BrowseMode=1
CheckoutMode=-1
ConcUpdateMode=0
ItemNewer=0
PathOption=2
ReplaceFile=1
ReserveMode=0
ShareWorkDir=0
SyncMode=1
UpdateMode=0
UseCITimeStamp=0
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Public
=5
Note=

iProcessType=206
Name=List Versions
=145
Note=This process is used to get a Unix-type difference report between two versions of a repository file.  This process can be invoked by anyone.
ProcessOrder=3
ShowActualChangesFlag=0
ShowDescriptionFlag=0
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Public
=5
Note=

iProcessType=213
Name=Promote to Production
=490
Note=This process is used to promote packages from the Staging state  to Production.  When the packages are promoted, the changes become seen in the Production view and are then available for additional changes.
The CCC/Harvest Administrator can add linked notification or user-defined (UDP) processes to the promote.  If a linked process is added, these linked processes are executed before the promote occurs.  If  a linked fails, the promotion fails and the packages stay in this state.

ProcessOrder=2
CheckPackageGroupBind=0
CheckPackageDependencies=0
MergedPkgsOnly=0
FromState=Staging
ToState=Production
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Production Control
=5
Note=

STATENAME=Production
size=1
iProcessType=202
Name=Check Out for Production
=414
Note=This process is used to check out a items for read-only.  Only members of the Production Control group can invoke this process.  You can choose to check items out for Browse, which will check out a read-only copy of every item you specify in the version list, or you can check out items for Synchronize, which will only check out items for read-only that have changed since the last time you checked them out.
ProcessOrder=1
BrowseMode=1
CheckoutMode=-1
ConcUpdateMode=0
ItemNewer=0
PathOption=2
ReplaceFile=1
ReserveMode=0
ShareWorkDir=0
SyncMode=1
UpdateMode=0
UseCITimeStamp=0
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Production Control
=5
Note=

STATENAME=Emergency
size=8
iProcessType=201
Name=Check In Changes
=536
Note=This process is used to check in an existing item after it has been modified.  You must have reserved the item before you can check it back in.  Only members of the Developer group have access to execute this process.  You must specify the package these changes are associated with.  When the item is checked in, the reserve tag is removed, the new revision of the item is placed in the repository,  the file properties are changed to read-only, and the signature file in the directory from which the file is checked in is updated.
ProcessOrder=3
CheckinMode=0
DeleteAfterCI=0
=11
Description=
ExistingOnly=1
ItemNewer=0
NewOnly=1
NewOrExisting=1
OwnerOnly=0
ItemOption=2
PathOption=0
ClientDir=/
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Developer
=5
Note=

iProcessType=202
Name=Check Out for Browse
=375
Note=This process is used to check out a items for read-only.  Anyone can invoke the process.  You can choose to check items out for Browse, which will check out a read-only copy of every item you specify in the version list, or you can check out items for Synchronize, which will only check out items for read-only that have changed since the last time you checked them out.
ProcessOrder=8
BrowseMode=1
CheckoutMode=-1
ConcUpdateMode=0
ItemNewer=0
PathOption=2
ReplaceFile=1
ReserveMode=0
ShareWorkDir=0
SyncMode=1
UpdateMode=0
UseCITimeStamp=0
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Public
=5
Note=

iProcessType=202
Name=Check Out for Update
=302
Note=This process is used to check out a item for Concurrent Update.  Only a Developer can invoke this process.  The developer must specify a package that these changes will be associated with.  When the item is checked out, a reserve tag is placed on the end of the branch associated with the package.
ProcessOrder=2
BrowseMode=0
CheckoutMode=-1
ConcUpdateMode=1
ItemNewer=0
PathOption=2
ReplaceFile=1
ReserveMode=0
ShareWorkDir=0
SyncMode=0
UpdateMode=0
UseCITimeStamp=0
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Developer
=5
Note=

iProcessType=211
Name=Create Package
=308
Note=This process is used to create a work package.  Anyone can execute this process.  When a new package is created, a unique number is generated for the package name and a Modification Request Form is associated with the package.  The package is also automatically added to the Emergency Fix package group.
ProcessOrder=1
CreateAssociatedForm=1
DefaultName=MR-%N('099999')
FormTypeObjId=6
StateName=Emergency
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Public
=5
Note=

iProcessType=203
Name=Delete Versions
=204
Note=This process is used to delete a version from the repository.  The process can only be invoked by the Development Manager.  Once a version has been removed from the repository it cannot be recovered.
ProcessOrder=7
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Dev Manager
=5
Note=

iProcessType=206
Name=List Versions
=304
Note=This process is used to promote packages that are ready for implementation to the Merge state.  To select packages for promotion, select the packages on the Workbench before invoking this process, or use the Package Chooser within the process window.  Anyone in development can perform this process.
ProcessOrder=6
ShowActualChangesFlag=0
ShowDescriptionFlag=0
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Public
=5
Note=

iProcessType=210
Name=Notify - Add New File
=480
Note=Because an item cannot be added to the Production view until it has been tested, a mail notification must be sent to the Merge Engineer to notify him/her that the new item must be added to the repository when the merge occurs.  You must modify the body of the notify process to include the directory name where the file can be located, the file name, and the package it must be associated with.  Once this information is entered, select the Notify button to send the message.
ProcessOrder=4
=154
MailMessage=Please add file: <put your file name here>
Located in the directory: <put where the file is located here>
For Package: <put package name here>
MailFacility=hmail -usr harvest -pw mail
Subject=
OnErrorAction=Display
OuputOption=Display
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=1
nameUserGroup=Developer
=5
Note=

iProcessType=213
Name=Promote to Merge
=304
Note=This process is used to promote packages that are ready for implementation to the Merge state.  To select packages for promotion, select the packages on the Workbench before invoking this process, or use the Package Chooser within the process window.  Anyone in development can perform this process.
ProcessOrder=5
CheckPackageGroupBind=0
CheckPackageDependencies=0
MergedPkgsOnly=1
FromState=Emergency
ToState=Merge
CancelFlag=0


[PRELINK]
size=0


[POSTLINK]
size=0


[ExecuteAccess]
AccessMethod=ExecuteAccess
size=2
nameUserGroup=Dev Manager
=5
Note=
nameUserGroup=Developer
=5
Note=

