<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAAAAABoAwAAJgAAACAgAAAAAAAAqAwAAI4DAAAoAAAAEAAAACAAAAABABgAAAAAAEAD
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADg4ODg4OBQUFAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAQEBCgoKBQUFa2ttTU1ODQ0NCwsLCQkJAAAAAAAAAAAAAAAAAAAAAAAA
        EBAQOzs7lZWVj4+PfXx8KCgpNzY5IiIjDQ0NDQ0NDQ0NBQUFAAAAAAAAAAAAAAAAREREo6KixMTD5eXl
        sKkqX3hQICAgNDU3KiwsJicnEBAQDQ0NCgoKAAAAAAAABgYGpqamxMTE4uLi3t3cbMIXZr2MQ0NDPT0+
        IyMjNzc3KysrIiIjDQ0NDg4OAAAAmpqapqal4uHh29vb1tLHQdtsY93FeHh4ExMTICAgUFBQMDAwLCwu
        JiYmERERDg4Oo6OjxsbG2tvayMnJFBQUS9a1v8PCeHh4DQ0NMzI0GxscOTk5MjI0JSUmAAAADg4OlJOT
        1dXVhd3MS9d2VlZXsLi2ubm5GRkZDQ0Ne3t9LCssKysrMTM0AAAAAAAAEBAQlJOTbt3GUtuWcbwUvaFB
        ubm3Z2dnRkZIICAgERERHR0dOTk5LCwtAAAAAAAAAAAAcG9vT9mCWcoasJ8dva2Mtra1RERFMDAxNTU3
        ODk6SEZJOjo8AAAAAAAAAAAAAAAABQUFQHIrkLlRxpYyaGZkQEBBMTAxFhYXFhYXT09QRkVHODg6AAAA
        AAAAAAAAAAAAAAAAbGttCgoKNTQ1cG9ya2puMjIybW5uQD9BTk1QQD9DAAAAAAAAAAAAAAAAAAAACgoK
        gYGDnJudfnyCcG5yX19hKSkpQEBBUVBTTUxOPjw/AAAAAAAAAAAAAAAAAAAABwcHY2NkpKOljoyPgoGE
        fXx/eXh6cnJ2a2tsUlBTAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRkZo6Kjk5KViIeKhYWGf36Cenp9c3F0
        WFhaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA/j///+AP///AA///gAH//4AA//8AAP//AAD//wAB//8AAf//AAP//4AD//+AB///gAf//4AP
        ///AD///4B///ygAAAAgAAAAQAAAAAEAGAAAAAAAgAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAODg4ODg4ODg4ODg4AAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAODg6SkpI4NTkODg4ODg4ODg4ODg4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAODg4ODg4ODg4ODg4ODg6SkpI4NTkODg4ODg4O
        Dg4ODg4ODg4ODg4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAODg4ODg64uLegoKCgoKBWVlYODg44NTk4NTkvMDEODg4ODg4ODg4ODg4ODg4ODg4ODg4AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAODg7AwMDT09OKiYmKiYmKiYmKiYlWVlYO
        Dg4+P0A0NDUuLi8rKiwODg4ODg4ODg4ODg4ODg4ODg4ODg4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAODg7AwMCgoKCKiYnr6+rp6OnRpD/AoimKiYlWVlYODg47Oz0zNDUvMDAsLi4rKywpKioO
        Dg4ODg4ODg4ODg4ODg4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAODg7AwMCgoKCKiYnp6enn5+bl
        5eXHmyCZty5YzRdWVlYODg5AQEE6Oj02Njg0NDYxMTItLS0qKisnJicODg4ODg4ODg4PDw8AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAODg7AwMCgoKCKiYnq6enl5eXj4+Ph4N+tohVqxx1m0DyKiYlWVlYODg5AQEE/
        Pj8qKiogICA8PDwvMDAsLCwpKSolJSYODg4ODg4SEhIAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMCKiYnp
        6Onm5ubh4eLg4ODe3NqGuR5WyxEs68Jc4seKiYkODg5EREUeHh4ODg41NTYbGxsbGxsyMTIuLi8pKSsl
        JSYkJCUYGBgAAAAAAAAAAAAAAAAAAAAODg7AwMCgoKCgoKDl5eTi4+Le3t7c3NzZ1s9gyBVE22c+6MRi
        4MfAwMAODg4TExMODg4hISFfXl+WlZeys7UbGxszMzQuLi8pKSomJicODg4AAAAAAAAAAAAAAAAAAAAA
        AADAwMCKiYnj4+Lh4OHf3t7b2tvZ2NfUy7Iw5JMn7cNg4cfGxsXAwMAODg4gICAODg4rKys1NTYODg7p
        6e0bGxs1NTkxMTEsLC0ODg4AAAAAAAAAAAAAAAAAAAAODg7AwMCgoKCgoKDf39/d3t3b29vY19egoKAO
        Dg6goKA26L+8ycbCwsLAwMAODg4ODg4ODg6VlZdfXmAhISKysrUbGxs4NjkxMTItLS4ODg4AAAAAAAAA
        AAAAAAAAAAAODg7AwMCKiYne3t7c3Nza2trY2Ni8189WVlZvb3EODg5g3sHDw8O/v7/AwMAODg4ODg4O
        Dg6ys7Vvb3ArKitvbnAbGxs1NjgvMTIODg4AAAAAAAAAAAAAAAAAAAAAAAAODg7AwMCKiYnX19fV1dW9
        1tEl7cVD34xPzApWVlagoKDAwMC8vLy5ubkODg4bGxsODg4ODg4ODg4ODg4hISIbGxs8PD01NTYxMTEO
        Dg4AAAAAAAAAAAAAAAAAAAAAAAAaGhrAwMCKiYnU09On2c9l4sg06cRZyxZkxBGkphi/v729vby6urq3
        t7cODg4bGxsODg4ODg4ODg4nJycbGxtCQkQ7Ozw1NTYODg4AAAAAAAAAAAAAAAAAAAAAAAAAAAAODg7A
        wMCKiYl/28hC5sJD5LRszUhtwRmungrGok+5urm4uLe2trYODg5YWFpWVlgqKiobGxsbGxtLTE1JR0pB
        QUM6Ojw0NDUODg4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAODg6KiYlJ5MNF4qtdyyBTzBCSrxrFlhzC
        qXS3t7e2tra4uLcODg5XVlhVVFZRUVRRUFVQUFFNTE9JSEpAQEI6OjsODg4AAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAODg6KiYlD5LlkyitTzBBpyTC9mRjFnUW8sp22tra4uLcODg5fX2AbGxsbGxsbGxtS
        UlZRUVJMTE9IR0lAPkE5OToODg4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAODg6KyolZyxpm
        yS+auFvKkhjBpWa3tbC4uLcODg5iYWYbGxs7Ozs1NTYODg4bGxtRUVRNTU9EREU+PD8ODg4AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAODg4ODg6gu3q+okfIly28rIkODg4ODg5nZ2tISEgY
        GBiVlZdfXmAhISIbGxtRUFNLS01CQUQ8PD4ODg4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAODg6sq64ODg4ODg4ODg4ODg5vb3Fsam5qaGxBQUEmJiays7Vvb3ArKitWVlhRT1JJSUpAP0IO
        Dg4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAODg6sq65mZGako6WWk5aBgIV2
        dXh1cnZxcXRaWlojIyMODg4bGxthYWNbWl5RT1JISUlBP0IODg4AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAODg6SkpJmZGaop6qcnJ6Ni46DgYSAf4N+e396eX14eHl2dXdxcXVvbnBm
        ZmdUUlZKSUoODg4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkJCQO
        Dg6lpKaenJ+TkpaLi4yIh4uHh4iEg4eBgIN+fYB7e315d3twb3FfX2BOTU8ODg4AAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAODg4ODg4ODg4ODg4ODg4ODg4ODg4O
        Dg4ODg4ODg4ODg4ODg4ODg4ODg4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAD////////////////////////////+H////Af//8AB//8AAH/+AAAf/AAAD/gAAAfwAAAD8AAAA+AA
        AAPgAAAHwAAAB8AAAA/AAAAPwAAAH8AAAB/gAAA/4AAAP/AAAH/4AAB/+AAA//gAAP/4AAH//AAB//8A
        A////////////w==
</value>
  </data>
</root>